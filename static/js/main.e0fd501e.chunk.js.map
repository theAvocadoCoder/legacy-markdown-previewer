{"version":3,"sources":["components/Editor/Editor.js","components/Previewer/Previewer.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Editor","props","useState","text","setText","id","onChange","e","target","value","textCurator","onClick","document","getElementById","Previewer","source","previewData","App","data","setData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4NAGe,SAASA,EAAOC,GAAO,MAGRC,mBAAS,IAHD,mBAG1BC,EAH0B,KAGpBC,EAHoB,KA4GlC,OACI,yBAAKC,GAAG,oBACJ,yBAAKA,GAAG,iBAAR,eAEA,8BAAUA,GAAG,SAASC,SAAU,SAACC,GAC7BH,EAAQG,EAAEC,OAAOC,OACjBR,EAAMS,YAAYP,KA5GT,mlEA8Gb,4BAAQE,GAAG,iBAAiBM,QAAS,WAEjCP,EAAQ,IACRQ,SAASC,eAAe,UAAUJ,MAAQ,KAH9C,iB,4BCnHG,SAASK,EAAUb,GAG9B,OACI,yBAAKI,GAAG,uBACJ,yBAAKA,GAAG,kBAAR,WAEA,yBAAKA,GAAG,WACJ,kBAAC,IAAD,CAAeU,OAAQd,EAAMe,gB,OCU9BC,MAjBf,WAAe,MAGaf,mBAAS,IAHtB,mBAGLgB,EAHK,KAGCC,EAHD,KAKb,OACE,yBAAKd,GAAG,iBAEN,kBAAC,EAAD,CAAQK,YAAa,SAACP,GACpBgB,EAAQhB,MAGV,kBAAC,EAAD,CAAWa,YAAaE,MCLVE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFf,SAASC,eAAe,SDyHpB,kBAAmBe,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e0fd501e.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './Editor.css'\r\n\r\nexport default function Editor(props) {\r\n\r\n    // creates state to manage the content of the editor\r\n    const [ text, setText ] = useState('');\r\n\r\n    // placeHolderText is what is displayed on the editor when the page loads for the first time and every time it refreshes\r\n    const placeHolderText = `# Markdown Cheat Sheet\r\n\r\n    This Cheat Sheet is provided by [The Markdown Guide](https://www.markdownguide.org)!\r\n    \r\n    This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can’t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for [basic syntax](https://www.markdownguide.org/basic-syntax) and [extended syntax](https://www.markdownguide.org/extended-syntax).\r\n    \r\n    ## Basic Syntax\r\n    \r\n    These are the elements outlined in John Gruber’s original design document. All Markdown applications support these elements.\r\n    \r\n    ### Heading\r\n    \r\n    # H1\r\n    ## H2\r\n    ### H3\r\n    \r\n    ### Bold\r\n    \r\n    **bold text**\r\n    \r\n    ### Italic\r\n    \r\n    *italicized text*\r\n    \r\n    ### Blockquote\r\n    \r\n    > blockquote\r\n    \r\n    ### Ordered List\r\n    \r\n    1. First item\r\n    2. Second item\r\n    3. Third item\r\n    \r\n    ### Unordered List\r\n    \r\n    - First item\r\n    - Second item\r\n    - Third item\r\n    \r\n    ### Code\r\n    \r\n    \\`code\\`\r\n    \r\n    ### Horizontal Rule\r\n    \r\n    ---\r\n    \r\n    ### Link\r\n    \r\n    [title](https://www.example.com)\r\n    \r\n    ### Image\r\n    \r\n    ![alt text](image.jpg)\r\n    \r\n    ## Extended Syntax\r\n    \r\n    These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.\r\n    \r\n    ### Table\r\n    \r\n    | Syntax | Description |\r\n    | ----------- | ----------- |\r\n    | Header | Title |\r\n    | Paragraph | Text |\r\n    \r\n    ### Fenced Code Block\r\n    \r\n    \\`\\`\\`\r\n    {\r\n      \"firstName\": \"John\",\r\n      \"lastName\": \"Smith\",\r\n      \"age\": 25\r\n    }\r\n    \\`\\`\\`\r\n    \r\n    ### Footnote\r\n    \r\n    Here's a sentence with a footnote. [^1]\r\n    \r\n    [^1]: This is the footnote.\r\n    \r\n    ### Heading ID\r\n    \r\n    ### My Great Heading {#custom-id}\r\n    \r\n    ### Definition List\r\n    \r\n    term\r\n    : definition\r\n    \r\n    ### Strikethrough\r\n    \r\n    ~~The world is flat.~~\r\n    \r\n    ### Task List\r\n    \r\n    - [x] Write the press release\r\n    - [ ] Update the website\r\n    - [ ] Contact the media`;\r\n\r\n    return (\r\n        <div id=\"editor-container\">\r\n            <div id=\"editor-header\">Text Editor</div>\r\n            {/* the onChange event listener monitors the changes in the editor and passes the value of the textarea to the text state. Then, it passes the text state to the textCurator function prop which is defined in the file for the App component */}\r\n            <textarea id=\"editor\" onChange={(e) => {\r\n                setText(e.target.value);\r\n                props.textCurator(text);\r\n            }}>{placeHolderText}</textarea>\r\n            <button id=\"clearEditorBtn\" onClick={() => {\r\n                // this sets the content of the textarea to an empty string and resets the text state as well\r\n                setText('');\r\n                document.getElementById('editor').value = '';\r\n            }}>Clear Editor</button>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport './Previewer.css'\r\n\r\nexport default function Previewer(props) {\r\n\r\n\r\n    return (\r\n        <div id=\"previewer-container\">\r\n            <div id=\"preview-header\">Preview</div>\r\n            {/* the previewdata prop is passed as the content of this div because it contains the parsed marked down text from the Editor component */}\r\n            <div id=\"preview\">\r\n                <ReactMarkdown source={props.previewData} />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\nimport Editor from '../Editor/Editor';\nimport Previewer from '../Previewer/Previewer';\nimport './App.css'\n\nfunction App() {\n\n  // creates state for the data returned from Editor's textCurator prop\n  const [ data, setData ] = useState('');\n\n  return (\n    <div id=\"app-container\">\n      {/* textCurator takes in text(what is typed into the editor) and sets the data state to that value */}\n      <Editor textCurator={(text) => {\n        setData(text);\n      }} />\n      {/* the previewData prop takes the data state (the contents of the editor) and uses the marked down parser to edit the text */}\n      <Previewer previewData={data} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}